start           ::= /* empty */
                | globaldeclarations
                ;

literal         ::= NUMBER
                | STRING
                | TRUE
                | FALSE
                ;

type            ::= BOOLEAN
                | INT
                ;

globaldeclarations      ::= globaldeclaration
                        | globaldeclarations globaldeclaration
                        ;

globaldeclaration       ::= variabledeclaration
                        | functiondeclaration
                        | mainfunctiondeclaration
                        ;

variabledeclaration     ::= type identifier ';'
                        ;

identifier              ::= ID
                        ;

functiondeclaration     ::= functionheader block
                        ;

functionheader          ::= type functiondeclarator
                        | VOID functiondeclarator
                        ;

functiondeclarator      ::= identifier '(' formalparameterlist ')'
                        | identifier '(' ')'
                        ;

formalparameterlist     ::= formalparameter
                        | formalparameterlist ',' formalparameter
                        ;

formalparameter         ::= type identifier
                        ;

mainfunctiondeclaration ::= mainfunctiondeclarator block
                        ;

mainfunctiondeclarator  ::= identifier '(' ')'
                        ;

block                   ::= '{' blockstatements '}'
                        | '{' '}'
                        ;

blockstatements         ::= blockstatement
                        | blockstatements blockstatement
                        ;

blockstatement          ::= variabledeclaration
                        | statement
                        ;

statement               ::= block
                        | ';'
                        | statementexpression ';'
                        | BREAK ';'
                        | RETURN expression ';'
                        | RETURN ';'
                        | IF '(' expression ')' statement
                        | IF '(' expression ')' statement ELSE statement
                        | WHILE '(' expression ')' statement
                        ;

statementexpression     ::= assignment
                        | functioninvocation
                        ;

primary                 ::= literal
                        | '(' expression ')'
                        | functioninvocation
                        ;

argumentlist            ::= expression
                        | argumentlist ',' expression
                        ;

functioninvocation      ::= identifier '(' argumentlist ')'
                        | identifier '(' ')'
                        ;

postfixexpression       ::= primary
                        | identifier
                        ;

unaryexpression         ::= '-' unaryexpression
                        | '!' unaryexpression
                        | postfixexpression
                        ;

multiplicativeexpression::= unaryexpression
                        | multiplicativeexpression '*' unaryexpression
                        | multiplicativeexpression '/' unaryexpression
                        | multiplicativeexpression '% ' unaryexpression
                        ;

additiveexpression      ::= multiplicativeexpression
                        | additiveexpression '+' multiplicativeexpression
                        | additiveexpression '-' multiplicativeexpression
                        ;

relationalexpression    ::= additiveexpression
                        | relationalexpression '<' additiveexpression
                        | relationalexpression '>' additiveexpression
                        | relationalexpression LE additiveexpression
                        | relationalexpression GE additiveexpression
                        ;

equalityexpression      ::= relationalexpression
                        | equalityexpression EQ relationalexpression
                        | equalityexpression NE relationalexpression
                        ;

conditionalandexpression::= equalityexpression
                        | conditionalandexpression AND equalityexpression
                        ;

conditionalorexpression ::= conditionalandexpression
                        | conditionalorexpression OR conditionalandexpression
                        ;

assignmentexpression    ::= conditionalorexpression
                        | assignment
                        ;

assignment              ::= identifier '=' assignmentexpression
                        ;

expression              ::= assignmentexpression
                        ;
